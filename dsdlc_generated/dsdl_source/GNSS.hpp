/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/joao/PESTA/control_system/v3/dsdl_source/GNSS.uavcan
 */

#ifndef DSDL_SOURCE_GNSS_HPP_INCLUDED
#define DSDL_SOURCE_GNSS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Generic status message to report GNSS Data
#

#
# Fix Status
#
uint8 status
#
# Number of satellites visible
#
uint8 satellites_visible
#
# Horizontal Dilution of Precision
#
uint16 hdop
#
# Vertical Dilution of Precision
#
uint16 vdop
#
# Latitude in degE7
#
int32 latitude
#
# Longitude in degE7
#
int32 longitude
#
# Altitude above mean sea level in meters
#
int32 altitude
#
# Ground Speed in m/s
#
float16 ground_speed
#
# Ground Course in degrees
#
float16 ground_course

bool health

#
# Fix Types
#
uint8 STATUS_TYPE_NO_GCS = 0
uint8 STATUS_TYPE_NO_FIX = 1
uint8 STATUS_TYPE_2D_FIX = 2
uint8 STATUS_TYPE_3D_FIX = 3
uint8 STATUS_TYPE_DGPS = 4
uint8 STATUS_TYPE_RTK_FLOAT = 5
uint8 STATUS_TYPE_RTK_FIX = 6
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl_source.GNSS
saturated uint8 status
saturated uint8 satellites_visible
saturated uint16 hdop
saturated uint16 vdop
saturated int32 latitude
saturated int32 longitude
saturated int32 altitude
saturated float16 ground_speed
saturated float16 ground_course
saturated bool health
******************************************************************************/

#undef status
#undef satellites_visible
#undef hdop
#undef vdop
#undef latitude
#undef longitude
#undef altitude
#undef ground_speed
#undef ground_course
#undef health
#undef STATUS_TYPE_NO_GCS
#undef STATUS_TYPE_NO_FIX
#undef STATUS_TYPE_2D_FIX
#undef STATUS_TYPE_3D_FIX
#undef STATUS_TYPE_DGPS
#undef STATUS_TYPE_RTK_FLOAT
#undef STATUS_TYPE_RTK_FIX

namespace dsdl_source
{

template <int _tmpl>
struct UAVCAN_EXPORT GNSS_
{
    typedef const GNSS_<_tmpl>& ParameterType;
    typedef GNSS_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_NO_GCS;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_NO_FIX;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_2D_FIX;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_3D_FIX;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_DGPS;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_RTK_FLOAT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > STATUS_TYPE_RTK_FIX;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > satellites_visible;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > hdop;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > vdop;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > latitude;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > longitude;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > altitude;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > ground_speed;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > ground_course;
        typedef ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > health;
    };

    enum
    {
        MinBitLen
            = FieldTypes::status::MinBitLen
            + FieldTypes::satellites_visible::MinBitLen
            + FieldTypes::hdop::MinBitLen
            + FieldTypes::vdop::MinBitLen
            + FieldTypes::latitude::MinBitLen
            + FieldTypes::longitude::MinBitLen
            + FieldTypes::altitude::MinBitLen
            + FieldTypes::ground_speed::MinBitLen
            + FieldTypes::ground_course::MinBitLen
            + FieldTypes::health::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::status::MaxBitLen
            + FieldTypes::satellites_visible::MaxBitLen
            + FieldTypes::hdop::MaxBitLen
            + FieldTypes::vdop::MaxBitLen
            + FieldTypes::latitude::MaxBitLen
            + FieldTypes::longitude::MaxBitLen
            + FieldTypes::altitude::MaxBitLen
            + FieldTypes::ground_speed::MaxBitLen
            + FieldTypes::ground_course::MaxBitLen
            + FieldTypes::health::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_NO_GCS >::Type STATUS_TYPE_NO_GCS; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_NO_FIX >::Type STATUS_TYPE_NO_FIX; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_2D_FIX >::Type STATUS_TYPE_2D_FIX; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_3D_FIX >::Type STATUS_TYPE_3D_FIX; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_DGPS >::Type STATUS_TYPE_DGPS; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_RTK_FLOAT >::Type STATUS_TYPE_RTK_FLOAT; // 5
    static const typename ::uavcan::StorageType< typename ConstantTypes::STATUS_TYPE_RTK_FIX >::Type STATUS_TYPE_RTK_FIX; // 6

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::status >::Type status;
    typename ::uavcan::StorageType< typename FieldTypes::satellites_visible >::Type satellites_visible;
    typename ::uavcan::StorageType< typename FieldTypes::hdop >::Type hdop;
    typename ::uavcan::StorageType< typename FieldTypes::vdop >::Type vdop;
    typename ::uavcan::StorageType< typename FieldTypes::latitude >::Type latitude;
    typename ::uavcan::StorageType< typename FieldTypes::longitude >::Type longitude;
    typename ::uavcan::StorageType< typename FieldTypes::altitude >::Type altitude;
    typename ::uavcan::StorageType< typename FieldTypes::ground_speed >::Type ground_speed;
    typename ::uavcan::StorageType< typename FieldTypes::ground_course >::Type ground_course;
    typename ::uavcan::StorageType< typename FieldTypes::health >::Type health;

    GNSS_()
        : status()
        , satellites_visible()
        , hdop()
        , vdop()
        , latitude()
        , longitude()
        , altitude()
        , ground_speed()
        , ground_course()
        , health()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<177 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "dsdl_source.GNSS";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool GNSS_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        status == rhs.status &&
        satellites_visible == rhs.satellites_visible &&
        hdop == rhs.hdop &&
        vdop == rhs.vdop &&
        latitude == rhs.latitude &&
        longitude == rhs.longitude &&
        altitude == rhs.altitude &&
        ground_speed == rhs.ground_speed &&
        ground_course == rhs.ground_course &&
        health == rhs.health;
}

template <int _tmpl>
bool GNSS_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(status, rhs.status) &&
        ::uavcan::areClose(satellites_visible, rhs.satellites_visible) &&
        ::uavcan::areClose(hdop, rhs.hdop) &&
        ::uavcan::areClose(vdop, rhs.vdop) &&
        ::uavcan::areClose(latitude, rhs.latitude) &&
        ::uavcan::areClose(longitude, rhs.longitude) &&
        ::uavcan::areClose(altitude, rhs.altitude) &&
        ::uavcan::areClose(ground_speed, rhs.ground_speed) &&
        ::uavcan::areClose(ground_course, rhs.ground_course) &&
        ::uavcan::areClose(health, rhs.health);
}

template <int _tmpl>
int GNSS_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::status::encode(self.status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::satellites_visible::encode(self.satellites_visible, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::hdop::encode(self.hdop, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vdop::encode(self.vdop, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::latitude::encode(self.latitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::longitude::encode(self.longitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude::encode(self.altitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ground_speed::encode(self.ground_speed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ground_course::encode(self.ground_course, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::health::encode(self.health, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int GNSS_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::status::decode(self.status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::satellites_visible::decode(self.satellites_visible, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::hdop::decode(self.hdop, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vdop::decode(self.vdop, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::latitude::decode(self.latitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::longitude::decode(self.longitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude::decode(self.altitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ground_speed::decode(self.ground_speed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ground_course::decode(self.ground_course, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::health::decode(self.health, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature GNSS_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xD88EA16232BE781FULL);

    FieldTypes::status::extendDataTypeSignature(signature);
    FieldTypes::satellites_visible::extendDataTypeSignature(signature);
    FieldTypes::hdop::extendDataTypeSignature(signature);
    FieldTypes::vdop::extendDataTypeSignature(signature);
    FieldTypes::latitude::extendDataTypeSignature(signature);
    FieldTypes::longitude::extendDataTypeSignature(signature);
    FieldTypes::altitude::extendDataTypeSignature(signature);
    FieldTypes::ground_speed::extendDataTypeSignature(signature);
    FieldTypes::ground_course::extendDataTypeSignature(signature);
    FieldTypes::health::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_NO_GCS >::Type
    GNSS_<_tmpl>::STATUS_TYPE_NO_GCS = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_NO_FIX >::Type
    GNSS_<_tmpl>::STATUS_TYPE_NO_FIX = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_2D_FIX >::Type
    GNSS_<_tmpl>::STATUS_TYPE_2D_FIX = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_3D_FIX >::Type
    GNSS_<_tmpl>::STATUS_TYPE_3D_FIX = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_DGPS >::Type
    GNSS_<_tmpl>::STATUS_TYPE_DGPS = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_RTK_FLOAT >::Type
    GNSS_<_tmpl>::STATUS_TYPE_RTK_FLOAT = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename GNSS_<_tmpl>::ConstantTypes::STATUS_TYPE_RTK_FIX >::Type
    GNSS_<_tmpl>::STATUS_TYPE_RTK_FIX = 6U; // 6

/*
 * Final typedef
 */
typedef GNSS_<0> GNSS;

// No default registration

} // Namespace dsdl_source

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dsdl_source::GNSS >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dsdl_source::GNSS::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dsdl_source::GNSS >::stream(Stream& s, ::dsdl_source::GNSS::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "status: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::status >::stream(s, obj.status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "satellites_visible: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::satellites_visible >::stream(s, obj.satellites_visible, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "hdop: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::hdop >::stream(s, obj.hdop, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vdop: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::vdop >::stream(s, obj.vdop, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "latitude: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::latitude >::stream(s, obj.latitude, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "longitude: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::longitude >::stream(s, obj.longitude, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "altitude: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::altitude >::stream(s, obj.altitude, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ground_speed: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::ground_speed >::stream(s, obj.ground_speed, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ground_course: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::ground_course >::stream(s, obj.ground_course, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "health: ";
    YamlStreamer< ::dsdl_source::GNSS::FieldTypes::health >::stream(s, obj.health, level + 1);
}

}

namespace dsdl_source
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dsdl_source::GNSS::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dsdl_source::GNSS >::stream(s, obj, 0);
    return s;
}

} // Namespace dsdl_source

#endif // DSDL_SOURCE_GNSS_HPP_INCLUDED