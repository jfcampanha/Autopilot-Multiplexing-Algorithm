/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/joao/PESTA/control_system/v3/dsdl_source/SensorsStatus.uavcan
 */

#ifndef DSDL_SOURCE_SENSORSSTATUS_HPP_INCLUDED
#define DSDL_SOURCE_SENSORSSTATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Sensors Status
#
bool[<=3] acc_status
bool[<=3] gyro_status
bool[<=3] mag_status
bool[<=3] baro_status
bool[<=3] airspeed_status
bool[<=2] gnss_status
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl_source.SensorsStatus
saturated bool[<=3] acc_status
saturated bool[<=3] gyro_status
saturated bool[<=3] mag_status
saturated bool[<=3] baro_status
saturated bool[<=3] airspeed_status
saturated bool[<=2] gnss_status
******************************************************************************/

#undef acc_status
#undef gyro_status
#undef mag_status
#undef baro_status
#undef airspeed_status
#undef gnss_status

namespace dsdl_source
{

template <int _tmpl>
struct UAVCAN_EXPORT SensorsStatus_
{
    typedef const SensorsStatus_<_tmpl>& ParameterType;
    typedef SensorsStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > acc_status;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > gyro_status;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > mag_status;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > baro_status;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > airspeed_status;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 2 > gnss_status;
    };

    enum
    {
        MinBitLen
            = FieldTypes::acc_status::MinBitLen
            + FieldTypes::gyro_status::MinBitLen
            + FieldTypes::mag_status::MinBitLen
            + FieldTypes::baro_status::MinBitLen
            + FieldTypes::airspeed_status::MinBitLen
            + FieldTypes::gnss_status::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::acc_status::MaxBitLen
            + FieldTypes::gyro_status::MaxBitLen
            + FieldTypes::mag_status::MaxBitLen
            + FieldTypes::baro_status::MaxBitLen
            + FieldTypes::airspeed_status::MaxBitLen
            + FieldTypes::gnss_status::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::acc_status >::Type acc_status;
    typename ::uavcan::StorageType< typename FieldTypes::gyro_status >::Type gyro_status;
    typename ::uavcan::StorageType< typename FieldTypes::mag_status >::Type mag_status;
    typename ::uavcan::StorageType< typename FieldTypes::baro_status >::Type baro_status;
    typename ::uavcan::StorageType< typename FieldTypes::airspeed_status >::Type airspeed_status;
    typename ::uavcan::StorageType< typename FieldTypes::gnss_status >::Type gnss_status;

    SensorsStatus_()
        : acc_status()
        , gyro_status()
        , mag_status()
        , baro_status()
        , airspeed_status()
        , gnss_status()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<29 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "dsdl_source.SensorsStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool SensorsStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        acc_status == rhs.acc_status &&
        gyro_status == rhs.gyro_status &&
        mag_status == rhs.mag_status &&
        baro_status == rhs.baro_status &&
        airspeed_status == rhs.airspeed_status &&
        gnss_status == rhs.gnss_status;
}

template <int _tmpl>
bool SensorsStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(acc_status, rhs.acc_status) &&
        ::uavcan::areClose(gyro_status, rhs.gyro_status) &&
        ::uavcan::areClose(mag_status, rhs.mag_status) &&
        ::uavcan::areClose(baro_status, rhs.baro_status) &&
        ::uavcan::areClose(airspeed_status, rhs.airspeed_status) &&
        ::uavcan::areClose(gnss_status, rhs.gnss_status);
}

template <int _tmpl>
int SensorsStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::acc_status::encode(self.acc_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gyro_status::encode(self.gyro_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mag_status::encode(self.mag_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baro_status::encode(self.baro_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::airspeed_status::encode(self.airspeed_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gnss_status::encode(self.gnss_status, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SensorsStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::acc_status::decode(self.acc_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gyro_status::decode(self.gyro_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mag_status::decode(self.mag_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baro_status::decode(self.baro_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::airspeed_status::decode(self.airspeed_status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gnss_status::decode(self.gnss_status, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature SensorsStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x1D3909D2E6727785ULL);

    FieldTypes::acc_status::extendDataTypeSignature(signature);
    FieldTypes::gyro_status::extendDataTypeSignature(signature);
    FieldTypes::mag_status::extendDataTypeSignature(signature);
    FieldTypes::baro_status::extendDataTypeSignature(signature);
    FieldTypes::airspeed_status::extendDataTypeSignature(signature);
    FieldTypes::gnss_status::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef SensorsStatus_<0> SensorsStatus;

// No default registration

} // Namespace dsdl_source

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dsdl_source::SensorsStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dsdl_source::SensorsStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dsdl_source::SensorsStatus >::stream(Stream& s, ::dsdl_source::SensorsStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "acc_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::acc_status >::stream(s, obj.acc_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gyro_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::gyro_status >::stream(s, obj.gyro_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "mag_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::mag_status >::stream(s, obj.mag_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "baro_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::baro_status >::stream(s, obj.baro_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "airspeed_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::airspeed_status >::stream(s, obj.airspeed_status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gnss_status: ";
    YamlStreamer< ::dsdl_source::SensorsStatus::FieldTypes::gnss_status >::stream(s, obj.gnss_status, level + 1);
}

}

namespace dsdl_source
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dsdl_source::SensorsStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dsdl_source::SensorsStatus >::stream(s, obj, 0);
    return s;
}

} // Namespace dsdl_source

#endif // DSDL_SOURCE_SENSORSSTATUS_HPP_INCLUDED