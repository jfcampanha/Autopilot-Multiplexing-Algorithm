/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/joao/PESTA/control_system/v3/dsdl_source/20987.SensorsData.uavcan
 */

#ifndef DSDL_SOURCE_SENSORSDATA_HPP_INCLUDED
#define DSDL_SOURCE_SENSORSDATA_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <dsdl_source/Accelerometer.hpp>
#include <dsdl_source/Airspeed.hpp>
#include <dsdl_source/Barometer.hpp>
#include <dsdl_source/GNSS.hpp>
#include <dsdl_source/Gyroscope.hpp>
#include <dsdl_source/Magnetometer.hpp>

/******************************* Source text **********************************
#
# Generic message with the actual raw reading of autopilot sensors
#

uint8 autopilot

#
# Sensors
#
Accelerometer[<=3] acc
Gyroscope[<=3] gyro
Magnetometer[<=3] mag
Barometer[<=3] baro
Airspeed[<=3] airspeed
GNSS[<=2] gnss
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl_source.SensorsData
saturated uint8 autopilot
dsdl_source.Accelerometer[<=3] acc
dsdl_source.Gyroscope[<=3] gyro
dsdl_source.Magnetometer[<=3] mag
dsdl_source.Barometer[<=3] baro
dsdl_source.Airspeed[<=3] airspeed
dsdl_source.GNSS[<=2] gnss
******************************************************************************/

#undef autopilot
#undef acc
#undef gyro
#undef mag
#undef baro
#undef airspeed
#undef gnss

namespace dsdl_source
{

template <int _tmpl>
struct UAVCAN_EXPORT SensorsData_
{
    typedef const SensorsData_<_tmpl>& ParameterType;
    typedef SensorsData_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > autopilot;
        typedef ::uavcan::Array< ::dsdl_source::Accelerometer, ::uavcan::ArrayModeDynamic, 3 > acc;
        typedef ::uavcan::Array< ::dsdl_source::Gyroscope, ::uavcan::ArrayModeDynamic, 3 > gyro;
        typedef ::uavcan::Array< ::dsdl_source::Magnetometer, ::uavcan::ArrayModeDynamic, 3 > mag;
        typedef ::uavcan::Array< ::dsdl_source::Barometer, ::uavcan::ArrayModeDynamic, 3 > baro;
        typedef ::uavcan::Array< ::dsdl_source::Airspeed, ::uavcan::ArrayModeDynamic, 3 > airspeed;
        typedef ::uavcan::Array< ::dsdl_source::GNSS, ::uavcan::ArrayModeDynamic, 2 > gnss;
    };

    enum
    {
        MinBitLen
            = FieldTypes::autopilot::MinBitLen
            + FieldTypes::acc::MinBitLen
            + FieldTypes::gyro::MinBitLen
            + FieldTypes::mag::MinBitLen
            + FieldTypes::baro::MinBitLen
            + FieldTypes::airspeed::MinBitLen
            + FieldTypes::gnss::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::autopilot::MaxBitLen
            + FieldTypes::acc::MaxBitLen
            + FieldTypes::gyro::MaxBitLen
            + FieldTypes::mag::MaxBitLen
            + FieldTypes::baro::MaxBitLen
            + FieldTypes::airspeed::MaxBitLen
            + FieldTypes::gnss::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::autopilot >::Type autopilot;
    typename ::uavcan::StorageType< typename FieldTypes::acc >::Type acc;
    typename ::uavcan::StorageType< typename FieldTypes::gyro >::Type gyro;
    typename ::uavcan::StorageType< typename FieldTypes::mag >::Type mag;
    typename ::uavcan::StorageType< typename FieldTypes::baro >::Type baro;
    typename ::uavcan::StorageType< typename FieldTypes::airspeed >::Type airspeed;
    typename ::uavcan::StorageType< typename FieldTypes::gnss >::Type gnss;

    SensorsData_()
        : autopilot()
        , acc()
        , gyro()
        , mag()
        , baro()
        , airspeed()
        , gnss()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<2825 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20987 };

    static const char* getDataTypeFullName()
    {
        return "dsdl_source.SensorsData";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool SensorsData_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        autopilot == rhs.autopilot &&
        acc == rhs.acc &&
        gyro == rhs.gyro &&
        mag == rhs.mag &&
        baro == rhs.baro &&
        airspeed == rhs.airspeed &&
        gnss == rhs.gnss;
}

template <int _tmpl>
bool SensorsData_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(autopilot, rhs.autopilot) &&
        ::uavcan::areClose(acc, rhs.acc) &&
        ::uavcan::areClose(gyro, rhs.gyro) &&
        ::uavcan::areClose(mag, rhs.mag) &&
        ::uavcan::areClose(baro, rhs.baro) &&
        ::uavcan::areClose(airspeed, rhs.airspeed) &&
        ::uavcan::areClose(gnss, rhs.gnss);
}

template <int _tmpl>
int SensorsData_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::autopilot::encode(self.autopilot, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::acc::encode(self.acc, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gyro::encode(self.gyro, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mag::encode(self.mag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baro::encode(self.baro, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::airspeed::encode(self.airspeed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gnss::encode(self.gnss, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SensorsData_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::autopilot::decode(self.autopilot, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::acc::decode(self.acc, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gyro::decode(self.gyro, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::mag::decode(self.mag, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baro::decode(self.baro, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::airspeed::decode(self.airspeed, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::gnss::decode(self.gnss, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature SensorsData_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xB4B47FB939AFF68FULL);

    FieldTypes::autopilot::extendDataTypeSignature(signature);
    FieldTypes::acc::extendDataTypeSignature(signature);
    FieldTypes::gyro::extendDataTypeSignature(signature);
    FieldTypes::mag::extendDataTypeSignature(signature);
    FieldTypes::baro::extendDataTypeSignature(signature);
    FieldTypes::airspeed::extendDataTypeSignature(signature);
    FieldTypes::gnss::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef SensorsData_<0> SensorsData;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::dsdl_source::SensorsData > _uavcan_gdtr_registrator_SensorsData;

}

} // Namespace dsdl_source

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dsdl_source::SensorsData >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dsdl_source::SensorsData::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dsdl_source::SensorsData >::stream(Stream& s, ::dsdl_source::SensorsData::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "autopilot: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::autopilot >::stream(s, obj.autopilot, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "acc: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::acc >::stream(s, obj.acc, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gyro: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::gyro >::stream(s, obj.gyro, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "mag: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::mag >::stream(s, obj.mag, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "baro: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::baro >::stream(s, obj.baro, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "airspeed: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::airspeed >::stream(s, obj.airspeed, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "gnss: ";
    YamlStreamer< ::dsdl_source::SensorsData::FieldTypes::gnss >::stream(s, obj.gnss, level + 1);
}

}

namespace dsdl_source
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dsdl_source::SensorsData::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dsdl_source::SensorsData >::stream(s, obj, 0);
    return s;
}

} // Namespace dsdl_source

#endif // DSDL_SOURCE_SENSORSDATA_HPP_INCLUDED