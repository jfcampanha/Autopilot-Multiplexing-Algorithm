/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/joao/PESTA/control_system/v3/dsdl_source/Accelerometer.uavcan
 */

#ifndef DSDL_SOURCE_ACCELEROMETER_HPP_INCLUDED
#define DSDL_SOURCE_ACCELEROMETER_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Linear acceleration in meter/(second^2)
# The samples are represented in the body frame, the axes are ordered as follows:
#   1. linear acceleration along X (forward positive)
#   2. linear acceleration along Y (right positive)
#   3. linear acceleration along Z (down positive)
#
float32[3] accelerometer
#
# Temperature reading in degC. Up to one per axis
#
float32[<=3] temperature
#
# Error counter. Up to one per axis
#
uint32[<=3] error_count
#
# Observer sensor rate in Hz. Up to one per axis
#
uint16[<=3] rate

bool health
******************************************************************************/

/********************* DSDL signature source definition ***********************
dsdl_source.Accelerometer
saturated float32[3] accelerometer
saturated float32[<=3] temperature
saturated uint32[<=3] error_count
saturated uint16[<=3] rate
saturated bool health
******************************************************************************/

#undef accelerometer
#undef temperature
#undef error_count
#undef rate
#undef health

namespace dsdl_source
{

template <int _tmpl>
struct UAVCAN_EXPORT Accelerometer_
{
    typedef const Accelerometer_<_tmpl>& ParameterType;
    typedef Accelerometer_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 3 > accelerometer;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > temperature;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > error_count;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 3 > rate;
        typedef ::uavcan::IntegerSpec< 1, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > health;
    };

    enum
    {
        MinBitLen
            = FieldTypes::accelerometer::MinBitLen
            + FieldTypes::temperature::MinBitLen
            + FieldTypes::error_count::MinBitLen
            + FieldTypes::rate::MinBitLen
            + FieldTypes::health::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::accelerometer::MaxBitLen
            + FieldTypes::temperature::MaxBitLen
            + FieldTypes::error_count::MaxBitLen
            + FieldTypes::rate::MaxBitLen
            + FieldTypes::health::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::accelerometer >::Type accelerometer;
    typename ::uavcan::StorageType< typename FieldTypes::temperature >::Type temperature;
    typename ::uavcan::StorageType< typename FieldTypes::error_count >::Type error_count;
    typename ::uavcan::StorageType< typename FieldTypes::rate >::Type rate;
    typename ::uavcan::StorageType< typename FieldTypes::health >::Type health;

    Accelerometer_()
        : accelerometer()
        , temperature()
        , error_count()
        , rate()
        , health()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<343 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "dsdl_source.Accelerometer";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Accelerometer_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        accelerometer == rhs.accelerometer &&
        temperature == rhs.temperature &&
        error_count == rhs.error_count &&
        rate == rhs.rate &&
        health == rhs.health;
}

template <int _tmpl>
bool Accelerometer_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(accelerometer, rhs.accelerometer) &&
        ::uavcan::areClose(temperature, rhs.temperature) &&
        ::uavcan::areClose(error_count, rhs.error_count) &&
        ::uavcan::areClose(rate, rhs.rate) &&
        ::uavcan::areClose(health, rhs.health);
}

template <int _tmpl>
int Accelerometer_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::accelerometer::encode(self.accelerometer, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::encode(self.temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_count::encode(self.error_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::encode(self.rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::health::encode(self.health, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Accelerometer_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::accelerometer::decode(self.accelerometer, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::decode(self.temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::error_count::decode(self.error_count, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rate::decode(self.rate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::health::decode(self.health, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Accelerometer_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xE9D5B43E72107B19ULL);

    FieldTypes::accelerometer::extendDataTypeSignature(signature);
    FieldTypes::temperature::extendDataTypeSignature(signature);
    FieldTypes::error_count::extendDataTypeSignature(signature);
    FieldTypes::rate::extendDataTypeSignature(signature);
    FieldTypes::health::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Accelerometer_<0> Accelerometer;

// No default registration

} // Namespace dsdl_source

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dsdl_source::Accelerometer >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dsdl_source::Accelerometer::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dsdl_source::Accelerometer >::stream(Stream& s, ::dsdl_source::Accelerometer::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "accelerometer: ";
    YamlStreamer< ::dsdl_source::Accelerometer::FieldTypes::accelerometer >::stream(s, obj.accelerometer, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temperature: ";
    YamlStreamer< ::dsdl_source::Accelerometer::FieldTypes::temperature >::stream(s, obj.temperature, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "error_count: ";
    YamlStreamer< ::dsdl_source::Accelerometer::FieldTypes::error_count >::stream(s, obj.error_count, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rate: ";
    YamlStreamer< ::dsdl_source::Accelerometer::FieldTypes::rate >::stream(s, obj.rate, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "health: ";
    YamlStreamer< ::dsdl_source::Accelerometer::FieldTypes::health >::stream(s, obj.health, level + 1);
}

}

namespace dsdl_source
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dsdl_source::Accelerometer::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dsdl_source::Accelerometer >::stream(s, obj, 0);
    return s;
}

} // Namespace dsdl_source

#endif // DSDL_SOURCE_ACCELEROMETER_HPP_INCLUDED